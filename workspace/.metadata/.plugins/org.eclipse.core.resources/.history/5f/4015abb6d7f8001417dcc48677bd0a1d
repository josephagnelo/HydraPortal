/**
 * 
 */
package com.hydra.services.impl;

import java.sql.SQLException;

import javax.persistence.EntityManager;
import javax.persistence.EntityNotFoundException;

import com.hydra.services.PartyService;
import com.hydra.user.entity.Party;
import com.hydra.user.exceptions.PartyException;

/**
 * @author jskariah
 *
 */

public class PartyServiceImpl implements PartyService {
	
	private EntityManager entityManager;

	/* (non-Javadoc)
	 * @see com.hydra.services.PartyService#getPartyByPartyId(java.lang.String)
	 */
	@Override
	public Party getPartyByPartyId(String partyId) {
		if(null != entityManager)
		{
			
			try {
				Party party = entityManager.find(Party.class, partyId);
				return party;
			} catch (EntityNotFoundException e) {
				//TODO - Add entity not found exception logging.
				e.printStackTrace();
			}
		}
		else
		{
			//TODO - Add logging.
		}
		return null;
	}

	/* (non-Javadoc)
	 * @see com.hydra.services.PartyService#createParty(com.hydra.user.entity.Party)
	 */
	@Override
	public void createParty(Party party) {
		if(null != entityManager)
		{
			entityManager.persist(party);
		}
		else
		{
			//TODO - Add logging.
		}

	}

	/* (non-Javadoc)
	 * @see com.hydra.services.PartyService#deletePartyByPartyId(java.lang.String)
	 */
	@Override
	public void deletePartyByPartyId(String partyId) {
		if(null != entityManager)
		{
			entityManager.getTransaction().begin();
			Party party = new Party();
			party.setPartyId(partyId);
			entityManager.remove(party);
			entityManager.getTransaction().commit();
		}
		else
		{
			//TODO - Add logging
		}

	}

	/* (non-Javadoc)
	 * @see com.hydra.services.PartyService#deleteParty(com.hydra.user.entity.Party)
	 */
	@Override
	public void deleteParty(Party party) throws PartyException {
		
		if(null != party)
		{
			if(null != party.getPartyId())
			{
				deletePartyByPartyId(party.getPartyId());
			}
		}

	}

	/* (non-Javadoc)
	 * @see com.hydra.services.PartyService#updateParty(com.hydra.user.entity.Party, java.lang.Boolean)
	 */
	@Override
	public void updateParty(Party party, Boolean fullUpdate)
			throws PartyException {
		// full update woudl replace the whole party
		if(fullUpdate)
		{
			tempParty = party.clone();
			try
			{
				Boolean removalSuccess = Boolean.FALSE;
				Boolean insertSucess = Boolean.FALSE;
				entityManager.getTransaction().begin();
				Party partyToBeRemoved = entityManager.getReference(Party.class, party.getPartyId());
				entityManager.remove(partyToBeRemoved);
				entityManager.getTransaction().commit();
				removalSuccess = Boolean.TRUE;
				entityManager.getTransaction().begin();
				entityManager.merge(party);
				entityManager.getTransaction().commit();
				insertSucess = Boolean.TRUE;
			}
			catch(EntityNotFoundException e)
			{
				// TODO - Add logging as an error 
			}
			catch(RuntimeException e)
			{
				entityManager.pe
			}
		}
		else
		{
			
		}

	}

	public EntityManager getEntityManager() {
		return entityManager;
	}

	public void setEntityManager(EntityManager entityManager) {
		this.entityManager = entityManager;
	}

}
